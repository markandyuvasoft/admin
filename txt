//post method user register HIDE PASSWORD start......................................
// userrouter.post("/user/post",async(req,res,next)=>{

//     let user = await User.findOne({email:req.body.email})

//     if(user){

//     return res.status(404).send('usernot found in database')
    
// }

//     user = new User(_.pick(req.body,['name','email','password']))
  
//     await user.save()

//     res.status(201).send(_.pick(user,['_id','name','email']))
//   })
//post method user register HIDE PASSWORD end......................................


//post method user register HIDE PASSWORD and BCRYPT PASSWORD START......................................
// userrouter.post("/register",async(req,res,next)=>{

//     let user = await User.findOne({email:req.body.email})
 
//     if(user){

//     return res.status(404).send('user already exists in database')
    
// }  else{
    
//     user = new User(_.pick(req.body,['name','email','password','isAdmin']))
  
//     const saltRounds =10

//     const salt = await bcrypt.genSalt(saltRounds);

//     user.password = await bcrypt.hash(user.password,saltRounds);

//     await user.save()

//     const token= user.generateTokens()


//     res.header('x-auth-token',token).send(_.pick(user,['_id','name','email','isAdmin']))
// }

//   })
//post method user register HIDE PASSWORD and BCRYPT PASSWORD end......................................





//JWT TOKEN WITHOUT BEARER WRITE

// const checkauth=(req,res,next)=>{

//     const token = req.header('Authorization')

//     if(!token){

//         return res.status(401).send({error:'only authorised person'})
//     }

//     try{

//         const decodeToken = Jwt.verify(token,'privatekey')

//         req.user = decodeToken

//         next()

//     }catch(e){

//         return res.status(401).send({error:'wrong token'})
//     }

// }


//OLD POST SEE DATA ALL USER
// router.post("/post",checkauth,async(req,res,next)=>{

//     const { name, age, city,salary } = req.body;

//     if(!name || !age || !city || !salary)
//     {
//         res.status(400).send({error:"plz fill the data"})
//     } else{

//         const user = new Employ(req.body)
      
//         user.save().then(()=>{
    
//         res.status(201).send(user)
    
//         }).catch((err)=>{
      
//         res.status(400).send(err)
    
//         }) 
//     }
//   })


//OLD GET SEE DATA ALL USER

// router.get("/get",checkauth,async(req,res)=>{

//     try{

//     const get= await Employ.find()

//     res.status(201).send(get)
//     }
//     catch(err)
//     {
//     res.status(400).send(err)
//     }
// })